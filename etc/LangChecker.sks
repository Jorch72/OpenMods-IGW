<#language "java">
<#script "LangChecker" declare public>
<#start "script">
/*************************************************************************************************/
/*
 * This file is part of OpenMods project.
 * Please see LICENSE file for more information.
 */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;

public class LangChecker {
	
	private static final String BLANK = "BLANK";
	private static final String COMMENT = "COMMENT";
	
	public static void main(final String[] args) {
		
		final JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = chooser.showDialog(null, "Select");
		File file;
		
		if (!(returnVal == JFileChooser.APPROVE_OPTION)) {
		
            System.err.println("An error has occurred!");
			System.err.println("The user has cancelled the choosing of a directory.");
			return;
        }
		
		file = chooser.getSelectedFile();
		
		if (file == null || !file.isDirectory()) {
			
			System.err.println("File specified is not a directory.");
			System.err.println("I'm wondering how that happened...");
			return;
		}
		
		File enUs = null;
		final List<File> langFiles = new ArrayList<>();
		
		for (final File langFile : file.listFiles()) {
			
			String name = langFile.getName();
			
			if (name != null && !name.isEmpty()) {
			
				if (name.equals("en_US.lang"))
					enUs = langFile;
				else
					langFiles.add(langFile);
			}
		}
		
		if (enUs == null || langFiles.isEmpty()) {
			
			System.err.println("Either the \"en_US.lang\" file does not exist or no other files are present.");
			return;
		}
		
		final Map<String, String> map = fillMap(enUs);
		
		for (final File f : langFiles) {
			
			writeFile(f, mapEntries(map, f));
		}
	}
	
	private static Map<String, String> fillMap(final File enUs) {
		
		final Map<String, String> enUsEntries = new LinkedHashMap<>();
		int countBlank = 0;
		int countComment = 0;
		
		try (final BufferedReader reader = new BufferedReader(new FileReader(enUs))) {
			
			String currentLine;
			
			while((currentLine = reader.readLine()) != null) {
				
				final int[] tmp = matchLines(currentLine, countBlank, countComment, enUsEntries);
				countBlank = tmp[0];
				countComment = tmp[1];
			}
		}
		catch (final Exception e) {
			
			e.printStackTrace();
		}
		
		return enUsEntries;
	}
	
	private static Map<String, String> mapEntries(final Map<String, String> enUsEntries, final File otherLang) {
		
		final Map<String, String> otherLangEntries = fillMap(otherLang);
		
		final Map<String, String> newOtherLangMap = new LinkedHashMap<>();
		
		for (Map.Entry<String, String> enUsEntry : enUsEntries.entrySet()) {
			
			if (enUsEntry.getKey().startsWith(BLANK)) {
				
				newOtherLangMap.put(enUsEntry.getKey(), null);
				continue;
			}
			
			if (enUsEntry.getKey().startsWith(COMMENT)) {
				
				newOtherLangMap.put(enUsEntry.getKey(), enUsEntry.getValue());
				continue;
			}
			
			final String translated = otherLangEntries.get(enUsEntry.getKey());
			
			if (translated == null || translated.isEmpty() || translated.equals(" ")) {
				
				newOtherLangMap.put(enUsEntry.getKey(), enUsEntry.getValue() + " ## NEEDS TRANSLATION ##");
				continue;
			}
			
			newOtherLangMap.put(enUsEntry.getKey(), translated);
		}
		
		return newOtherLangMap;
	}
	
	private static int[] matchLines(final String currentLine, final int blank, final int comment, final Map<String, String> entries) {

		if (currentLine.isEmpty() || currentLine.startsWith(" ")) {
					
			entries.put(BLANK + blank, null);
			final int newBlank = blank + 1;
			return new int[] {newBlank, comment};
		}
	
		if (currentLine.startsWith("#")) {
			
			entries.put(COMMENT + comment, currentLine.substring(1));
			final int newComment = comment + 1;
			return new int[] {blank, newComment};
		}
		
		if (currentLine.contains("=")) {
			
			String[] parts = currentLine.split(Pattern.quote("="));
			
			if (parts.length != 2) {
				
				for (int i = 1; i < parts.length; ++i) {
					
					parts[1] = parts[1] + parts[i];
				}
			}
			
			if (parts[0].endsWith("="))
				parts[0] = parts[0].substring(0, parts[0].length() - 1);
			
			if (parts[1].startsWith("="))
				parts[1] = parts[1].substring(1);
			
			entries.put(parts[0], parts[1]);
			
			return new int[] {blank, comment};
		}
		
		throw new RuntimeException("Error in language file syntax.");
	}
	
	private static void writeFile(final File toWrite, final Map<String, String> entries) {
		
		if (toWrite.exists())
			toWrite.delete();
		
		try (PrintWriter out = new PrintWriter(new FileWriter(toWrite))) {
			
			for (Map.Entry<String, String> entry : entries.entrySet()) {
				
				final String key = entry.getKey();
				final String value = entry.getValue();
				
				if (key == null)
					continue;
				
				if (key.startsWith(BLANK)) {
					
					out.println();
					continue;
				}
				
				if (key.startsWith(COMMENT)) {
					
					out.println("#" + value);
					continue;
				}
				
				if (value == null)
					continue;
				
				out.println(String.format("%s=%s", key, value));
			}
		}
		catch (final Exception e) {
			
			e.printStackTrace();
		}
	}
}
/*************************************************************************************************/
<#end script>
