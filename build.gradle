/*
 * OpenMods-IGW build file.
 * @author Arkan <arkan@emberwalker.cc>
 */

//================================================
// Pre-execute

buildscript {
    repositories {
        // General deps
        mavenCentral()
        // Minecraft Forge
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        // Sonatype (for SpecialSource in 1.7+)
        maven {
            name = "Sonatype Nexus"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name "IGW"
        url "http://maven.k-4u.nl/"
    }
}

buildscript {
  repositories {
    maven {
      name 'OpenMods Third Party'
      url 'http://repo.openmods.info/artifactory/simple/thirdparty'
    }
  }
  //noinspection GroovyAssignabilityCheck
  dependencies {
    classpath group: 'net.thesilkminer.gradle.translationchecker',
              name: 'TranslationChecker',
              version: '1.1'
  }
}

apply plugin: 'forge'

//================================================
// Dependencies

//noinspection GroovyAssignabilityCheck
dependencies {
    compile project(":OpenModsLib") // Load OpenModsLib from submodule
    compile "igwmod:IGW-Mod-1.7.10:1.1.9-29:userdev"
}

//================================================
// Jar data

// Grab system env
ext.env = System.getenv()

version = mc_ver + "-" + mod_version

ext.in_jenkins = false
// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = null
def hash = null
def proc1 = "git rev-parse --short HEAD".execute()
proc1.in.eachLine { line -> //noinspection GrReassignedInClosureLocalVar
    hash = line }
proc1.err.eachLine { line -> println line }
proc1.waitFor()


if (!in_jenkins) {
    def proc2 = "git rev-parse --abbrev-ref HEAD".execute()
    proc2.in.eachLine { line -> //noinspection GrReassignedInClosureLocalVar
        branch = line }
    proc2.err.eachLine { line -> println line }
    proc2.waitFor()
} else { // In Jenkins
    branch = env.GIT_BRANCH.minus("origin/")
}

// If not on master, add branch to jar name
if (branch != null && !branch.equals("master")) {
    version += "-" + branch
} else {
    //version += "-" + hash
}

// Version tag for jar file name
if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

// Setup Forge plugin
minecraft {
    version = mc_ver + "-" + forge_ver
    runDir = "run"

    replaceIn 'openmods/igw/utils/Constants.java'
    replace '$VERSION$', mod_version
    replace '$LIB-VERSION$', project(':OpenModsLib').mod_version
    replace '$NEXT-LIB-VERSION$', project(':OpenModsLib').next_mod_version
}

//noinspection GroovyAssignabilityCheck
processResources {
    inputs.property "version", rootProject.mod_version

    // Process mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version':mod_version,'MCVersion':mc_ver
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

//================================================
// Jar tasks

// Generate FML Coremod manifest
ext.fmlManifest = manifest {}

// Merge Jenkins and Git manifests to form final manifest in final release jar
//noinspection GroovyAssignabilityCheck
jar {
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

// API jar
task apiJar(type: Jar) {

    from sourceSets.main.output
    from sourceSets.main.java

    include 'openmods/igw/api/**'

	classifier = 'api'
	
    manifest {
        from jenkinsManifest, gitManifest
    }
}

// Dev jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

artifacts {
	archives apiJar
    archives deobfJar
}

//================================================
// Misc tasks

// Check and update all language files
task translationCheck(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
	modId = 'openmods-igw'
}
