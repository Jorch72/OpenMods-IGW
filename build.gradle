import net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name 'OpenMods Third Party'
            url 'http://repo.openmods.info/artifactory/simple/thirdparty'
        }
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '2.2-SNAPSHOT'
        classpath group: 'net.thesilkminer.gradle.translationchecker', name: 'TranslationChecker', version: '1.1'
        classpath group: 'com.autoscout24.gradle', name: 'gradle-todo-plugin', version: '1.0'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.14.0'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.autoscout24.gradle.todo'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

idea {
    module {
        inheritOutputDirs = true
    }
}

// noinspection GrUnresolvedAccess
license {
    // noinspection GrUnresolvedAccess
    header file('LICENSE')
    // noinspection GrUnresolvedAccess
    include '**/*.java'

    // noinspection GrUnresolvedAccess
    strictCheck true
    // noinspection GrUnresolvedAccess
    ignoreFailures false

    // noinspection GrUnresolvedAccess
    mapping {
        java='SLASHSTAR_STYLE'
    }
}

todo {
    todoPattern = '\\/(\\/|\\*)(( )|())[\\\\t\\\\s]*(TODO|FIXME)(.*)'
}

findbugs {
    ignoreFailures = true
}

checkstyle {
    toolVersion = '8.2'
    configFile = new File(new File(rootDir, 'etc'), 'checkstyle.xml')
}

tasks.withType(FindBugs) {
    reports {
        // FindBugs only supports one report, ffs
        xml.enabled = false

        html.enabled = true
        html.stylesheet project.resources.text.fromFile('etc/findbugs.xsl')
        html.destination rootProject.file('build/reports/findbugs.html')
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = true
        xml.destination rootProject.file('build/reports/checkstyle.xml')

        html.enabled = true
        html.stylesheet project.resources.text.fromFile('etc/checkstyle.xsl')
        html.destination rootProject.file('build/reports/checkstyle.html')
    }
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
    jcenter()
    maven {
        name "IGW"
        url "http://maven.k-4u.nl/"
    }
}

dependencies {
    // OpenModsLib
    compile project(":OpenModsLib")
    
    // IGW-Mod
    compile group: 'igwmod', name: 'IGW-Mod-1.9.4', version: '1.3.0-5', classifier: 'userdev' // Don't ask why we're using 1.9.4. Just don't
}

//================================================
// Jar data

// Grab system env
ext.env = System.getenv()

version = mc_version + "-" + openmods_igw_version

ext.in_jenkins = false

if (env.BUILD_TAG != null) {
    // If this works, we'll assume we're in Jenkins at least.
    in_jenkins = true
}

def branch = null
def hash = null
def proc1 = "git rev-parse --short HEAD".execute()
proc1.in.eachLine { line -> //noinspection GrReassignedInClosureLocalVar
    hash = line }
proc1.err.eachLine { line -> println line }
proc1.waitFor()


if (!in_jenkins) {
    def proc2 = "git rev-parse --abbrev-ref HEAD".execute()
    proc2.in.eachLine { line -> //noinspection GrReassignedInClosureLocalVar
        branch = line }
    proc2.err.eachLine { line -> println line }
    proc2.waitFor()
} else { // In Jenkins
    branch = env.GIT_BRANCH.minus("origin/")
}

// If not on master, add branch to jar name
if (branch != null && !(branch.equals("master") || branch.equals(current_dev_branch))) {
    version += "-" + branch
} else {
    //version += "-" + hash
}

// Version tag for jar file name
if (env.BUILD_NUMBER != null) {
    //noinspection GroovyAssignabilityCheck
    version += "-snapshot-" + env.BUILD_NUMBER
}

// Jar Data END
//================================================

ext.jenkinsManifest = manifest {
    if (in_jenkins) {
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
    } else {
        attributes("Jenkins-Build": "false")
    }
}

ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    } else {
        attributes("Git-Branch": 'Not in a Git Branch', "Git-Hash": 'unavailable')
    }
}

ext.coremodManifest = manifest {}

minecraft {
    version = mc_version + "-" + forge_version
    runDir = "run"
    mappings = mcp_mappings

    replaceIn 'openmods/igw/impl/utils/Constants.java'
    replace '$VERSION$', openmods_igw_version
    replace '$LIB-VERSION$', project(':OpenModsLib').mod_version
    replace '$NEXT-LIB-VERSION$', project(':OpenModsLib').next_mod_version
}

processResources {
    inputs.property 'version', openmods_igw_version
    inputs.property 'mc_version', mc_version

    // Process *.info
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version': openmods_igw_version, 'mc_version': mc_version
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

// Merge Jenkins and Git manifests to form final manifest in final release jar
jar {
    manifest {
        //noinspection GroovyAssignabilityCheck
        from jenkinsManifest, gitManifest, coremodManifest
    }
}

ext.sourcesPath = new File(new File(new File(buildDir, "sources"), "main"), "java")

// API jar
task apiJar(type: Jar) {
    baseName 'OpenMods-IGW-API'
    version openmods_igw_api_version

    //noinspection GroovyAssignabilityCheck
    from sourceSets.main.output

    include 'openmods/igw/api/**'

    classifier = 'api'

    manifest {
        //noinspection GroovyAssignabilityCheck
        from jenkinsManifest, gitManifest
    }
}

// API Src Jar
task apiSrcJar(type: Jar) {
    baseName 'OpenMods-IGW-API'
    version openmods_igw_api_version
    classifier 'sources'
    
    from sourcesPath
    
    include 'openmods/igw/api/**'
    
    manifest {
        //noinspection GroovyAssignabilityCheck
        from jenkinsManifest, gitManifest
    }
}

//noinspection GrUnresolvedAccess,GroovyAssignabilityCheck
compileJava.dependsOn licenseMain
//noinspection GrUnresolvedAccess,GroovyAssignabilityCheck
licenseMain.dependsOn licenseFormatMain
//noinspection GrUnresolvedAccess,GroovyAssignabilityCheck
compileJava.dependsOn checkTodo
build.dependsOn check

artifacts {
    archives apiJar
    archives apiSrcJar
}

task checkTranslations(type: TranslationCheckTask) {
    modId = 'openmods-igw'
}

build.dependsOn checkTranslations

task wrapper(type: Wrapper) {
    gradleVersion = "3.5-rc-2"
}
